#!/usr/bin/env ruby

Dir.glob(File.expand_path("../_vendor/*/lib", __FILE__)) do |path|
  $LOAD_PATH.unshift(path) unless $LOAD_PATH.include?(path)
end

require 'cli/ui'
require 'cli/kit'
require 'yaml'
require 'tempfile'
require 'time'

CLI::UI::StdoutRouter.enable

def format_desc(desc)
  desc = desc.to_s.chomp
  # Replace lines that start with - with a list item
  desc = desc.gsub(/^\s*-\s*(.*?)$/, '<li>\1</li>')
  desc = desc.gsub(/<li>(.*)<\/li>/m, '<ul><li>\1</li></ul>')
  desc.gsub("\n", "<br>")
end

def generate_rubric(assignment)
  toc = ["<!-- RUBRIC START --> \n"]
  toc << "| Section | Description | Worth |"
  toc << "| --- | --- | --- |"

  total = 0

  assignment["breakdown"].map do |section|
    desc = format_desc(section["description"])
    total += section["worth"]
    toc << "| #{section["section"].to_s.chomp} | #{desc} | #{section["worth"].to_s.chomp} |"
  end

  if total != 100
    raise "#{assignment['name'].to_s.chomp} total was #{total} not 100!"
  end

  toc << "| | **Total:** | 100 |"
  toc << "\n <!-- RUBRIC END -->"
  toc.join("\n")
end

def generate_overview(assignments)
  header = <<~EOF
  
  | Assignment | Description | Weight | Submission Location | Due Date |
  | --- | --- | --- | --- | --- |
  EOF

  body = []
  bonuses = 0
  (assignments["team"] + assignments["user"]).sort_by { |a| a["position"] }.each do |assignment|
    name = assignment["number"].nil? ? assignment["name"] : "Assignment #{assignment["number"]}"
    
    if  assignment['due_date'].nil?
      raise ArgumentError, "#{name} is missing a due date"
    end
    
    due = assignment['due_date'].is_a?(String) ? Time.parse(assignment['due_date']) : assignment['due_date']
    # raise "'#{assignment['name']}' due before today. Due Date is wrong: #{due}" if due <= Time.now
    due = due.strftime("%B %d, %Y")
    due = "Multiple Due Dates" if assignment['multiple_due_dates']
    body << "| [#{name}](../#{assignment["file"]}) #{'(Bonus)' if assignment['bonus']} | #{assignment["name"]} | #{assignment["worth"]}% | #{assignment["submission"]} | #{due} |"
    bonuses += assignment["worth"] if assignment['bonus']
  end

  bonus_text = bonuses > 0 ? "(+#{bonuses}%)" : ""
  footer = <<~EOF
  | | **Total** | 100% #{bonus_text} | | |
  EOF

  "<!-- OVERVIEW START -->\n\n" + header + body.join("\n") + "\n" + footer + "\n<!-- OVERVIEW END -->"
end

def parse_assignments(assignments)
  assignments.each do |assignment|
    puts "Parsing #{assignment['name']}"
    file = File.read(assignment["file"])
    rubric = generate_rubric(assignment)
    new_content = file.gsub(/<!-- RUBRIC START -->.*<!-- RUBRIC END -->/m, rubric)
    File.write(assignment["file"], new_content)
  end
end

assignments = YAML.load_file("assignments.yml")

worths = (assignments["team"] + assignments["user"]).map do |assignment|
  next 0 if assignment['bonus']
  assignment['worth']
end
total_worth = worths.inject(:+)
raise "Total worth was not 100, it was #{total_worth}" if total_worth != 100

parse_assignments assignments["team"]
parse_assignments assignments["user"]

puts "Outputting to Assignment/README.md"
file = File.read("assignments/README.md")
new_content = file.gsub(/<!-- OVERVIEW START -->.*<!-- OVERVIEW END -->/m, generate_overview(assignments))
File.write("assignments/README.md", new_content)
