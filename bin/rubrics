#!/usr/bin/env ruby

Dir.glob(File.expand_path("../_vendor/*/lib", __FILE__)) do |path|
  $LOAD_PATH.unshift(path) unless $LOAD_PATH.include?(path)
end

require 'cli/ui'
require 'cli/kit'
require 'yaml'
require 'tempfile'

CLI::UI::StdoutRouter.enable

def generate_rubric(assignment)
  toc = ["<!-- RUBRIC START -->"]
  toc << "| Section | Description | Worth |"
  toc << "| --- | --- | --- |"

  total = 0

  assignment["breakdown"].map do |section|
    total += section["worth"]
    toc << "| #{section["section"]} | #{section["description"]} | #{section["worth"]} |"
  end

  if total != 100
    raise "#{assignment['name']} total was #{total} not 100!"
  end

  toc << "| | **Total:** | 100 |"
  toc << "<!-- RUBRIC END -->"
  toc.join("\n")
end

def generate_overview(assignments)
  header = <<~EOF
  | Assignment | Description | Weight | Submission Location |
  | --- | --- | --- | --- |
  EOF

  body = []
  assignments["team"].each do |team_assignment|
    body << "| [Assignment #{team_assignment["position"]}](/#{team_assignment["file"]}) #{'(Bonus)' if team_assignment['bonus']} | #{team_assignment["name"]} | #{team_assignment["worth"]}% | Repo |"
  end

  assignments["user"].each do |user_assignment|
    body << "| [#{user_assignment["name"]}](/#{user_assignment["file"]}) #{'(Bonus)' if user_assignment['bonus']} | #{user_assignment["name"]} | #{user_assignment["worth"]}% | Repo |"
  end

  footer = <<~EOF
  | | **Total** | 100% (+5%) | |
  EOF

  "\n<!-- OVERVIEW START -->" + header + body.join("\n") + footer + "\n<!-- OVERVIEW END -->"
end

def parse_assignments(assignments)
  assignments.each do |assignment|
    puts "Parsing #{assignment['name']}"
    file = File.read(assignment["file"])
    rubric = generate_rubric(assignment)
    new_content = file.gsub(/<!-- RUBRIC START -->.*<!-- RUBRIC END -->/m, rubric)
    File.write(assignment["file"], new_content)
  end
end

assignments = YAML.load_file("assignments.yml")

worths = (assignments["team"] + assignments["user"]).map do |assignment|
  next 0 if assignment['bonus']
  assignment['worth']
end
total_worth = worths.inject(:+)
raise "Total worth was not 100, it was #{total_worth}" if total_worth != 100

parse_assignments assignments["team"]
parse_assignments assignments["user"]

puts "Outputting to Assignment/README.md"
file = File.read("assignments/README.md")
new_content = file.gsub(/<!-- OVERVIEW START -->.*<!-- OVERVIEW END -->/m, generate_overview(assignments))
File.write("assignments/README.md", new_content)
