#!/usr/bin/env ruby

Dir.glob(File.expand_path("../vendor/*/lib", __FILE__)) do |path|
  $LOAD_PATH.unshift(path) unless $LOAD_PATH.include?(path)
end

require 'cli/ui'
require 'cli/kit'
require 'yaml'
require 'tempfile'

CLI::UI::StdoutRouter.enable

unless CLI::Kit::System.capture2("which marp").last.success?
  CLI::UI::Spinner.spin("Installing Marp CLI") do
    CLI::Kit::System.system("npm install -g @marp-team/marp-cli")
  end
end

def convert_file(file)
  output = File.join(
    File.dirname(file),
    "output",
    File.basename(file, ".md") + ".html"
  )

  Tempfile.create(File.basename(file, ".md")) do |tmp_file|
    file_content = File.read(file).gsub(%r{\(img}, "(../img") # Change images to be ../img instead of img
    file_content = file_content.gsub(%r{\./img}, "../img") # Change images to be ../img instead of ./img
    file_content += <<~EOF
    <style>
      img[alt~='center'] {
        display: block;
        margin-left: auto;
        margin-right: auto;
      }
    </style>
    EOF
    tmp_file.write(file_content)
    tmp_file.rewind

    CLI::UI::Frame.divider("Conversion")
    puts "#{file} => #{output}"
    CLI::UI::Spinner.spin("Running marp on file") do
      CLI::Kit::System.system("marp #{tmp_file.path} -o #{output}")
    end
  end
end

def sha_when_last_changed(file)
  `git log -n 1 --pretty=format:%H -- #{file}`.chomp
end

def dirty_files
  `git status --porcelain`.lines.map { |l| l.split(/\s+/).last.strip }
end

tracking_file = File.expand_path("../../presentations/output/changed.yml", __FILE__)
tracking = YAML.load_file(tracking_file)

presentations_glob = File.expand_path("../../presentations/*.md", __FILE__)
Dir.glob(presentations_glob) do |file|
  next if File.basename(file) == "README.md"

  CLI::UI::Frame.open(file) do
    sha = sha_when_last_changed(file)

    if tracking[file] == sha && !ARGV.include?("--force")
      puts "#{file} unchanged, skipping"
      next
    end

    if sha.empty? || dirty_files.include?(file)
      puts CLI::UI.fmt "{{bold:[WARNING]}} You have not committed #{file}, please commit."
    end

    puts "Latest change: #{sha}"
    puts "Last rendered at: #{tracking[file]}"

    if convert_file(file) && !sha.empty?
      tracking[file] = sha
    end
  end
end

File.write(tracking_file, tracking.to_yaml)
